name: Deploy

on:
  push:
    branches:
      - api-routes
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: extractions/setup-just@v2
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.aws_region }}
          role-to-assume: arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.aws_role }}
          role-session-name: GitHubActions

      - name: Set image_uri output
        shell: bash
        run: just validate

  repo:
    runs-on: ubuntu-latest
    needs: validate
    env:
      TF_VAR_ecr_repo_name: ${{ vars.aws_account_id }}-weighted-target-ecs
      TF_VAR_lambda_code_bucket_name: ${{ vars.aws_account_id }}-weighted-target-lambda-code
    outputs:
      ecr_repo_name: ${{ steps.set-envs.outputs.ECR_REPO_NAME }}
      lambda_code_bucket: ${{ steps.set-envs.outputs.LAMBDA_CODE_BUCKET }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.aws_region }}
          role-to-assume: arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.aws_role }}
          role-session-name: GitHubActions

      - name: Init
        shell: bash
        run: |
          cd tf/repo
          terraform init
    
      - name: Deploy
        shell: bash
        id: deploy
        run: |
          cd tf/repo
          terraform apply -auto-approve -var-file=${{ github.workspace }}/variables.tfvars

      - name: Set env vars
        id: set-envs
        shell: bash
        run: |
          cd tf/repo
          ECR_REPO_NAME=$(terraform output -raw ecr_repo_name)
          LAMBDA_CODE_BUCKET=$(terraform output -raw lambda_code_bucket)
          echo "ECR_REPO_NAME=$ECR_REPO_NAME" >> $GITHUB_OUTPUT
          echo "LAMBDA_CODE_BUCKET=$LAMBDA_CODE_BUCKET" >> $GITHUB_OUTPUT

  image:
    runs-on: ubuntu-latest
    needs: repo
    outputs:
      image_uri: ${{ steps.set-image-uri.outputs.image_uri }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.aws_region }}
          role-to-assume: arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.aws_role }}
          role-session-name: GitHubActions

      - name: Build and push detected changes
        id: build-image
        uses: ./.github/actions/build_image
        with:
          aws_account_id: ${{ vars.aws_account_id }}
          aws_region: ${{ vars.aws_region }}
          ecr_repository_name: ${{ needs.repo.outputs.ecr_repo_name }}

      - name: Set image_uri output
        id: set-image-uri
        run: |
          echo "image_uri=${{ env.IMAGE_URI }}" >> $GITHUB_OUTPUT

  code:
    runs-on: ubuntu-latest
    needs: repo
    env:
      lambda_zip: ${{ github.ref_name }}.zip
      lambda_bucket: ${{ needs.repo.outputs.lambda_code_bucket }}
    outputs:
      lambda_zip: ${{ steps.set-lambda-zip.outputs.lambda_zip }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.aws_region }}
          role-to-assume: arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.aws_role }}
          role-session-name: GitHubActions

      - name: Build
        shell: bash
        run: |
          cd src
          npm install

      - name: zip
        shell: bash
        run: |
          cd src
          zip -r ${{ env.lambda_zip }} *

      - name: upload
        shell: bash
        run: |
          aws s3 cp src/${{ env.lambda_zip }} s3://${{ env.lambda_bucket }}/${{ env.lambda_zip }}

      - id: set-lambda-zip
        run: |
          echo "lambda_zip=${{ env.lambda_zip }}" >> $GITHUB_OUTPUT

  network:
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      lb_security_group_id: ${{ steps.set-envs.outputs.LB_SECURITY_GROUP_ID }}
      lb_ecs_target_group_arn: ${{ steps.set-envs.outputs.LB_ECS_TARGET_GROUP_ARN }}
      lb_lambda_target_group_arn: ${{ steps.set-envs.outputs.LB_LAMBDA_TARGET_GROUP_ARN }}
      api_invoke_url: ${{ steps.set-envs.outputs.API_INVOKE_URL }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.aws_region }}
          role-to-assume: arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.aws_role }}
          role-session-name: GitHubActions

      - name: Init
        shell: bash
        run: |
          cd tf/network
          terraform init
    
      - name: Deploy
        shell: bash
        id: deploy
        run: |
          cd tf/network
          terraform apply -auto-approve -var-file=${{ github.workspace }}/variables.tfvars

      - name: Set env vars
        id: set-envs
        shell: bash
        run: |
          cd tf/network
          LB_SECURITY_GROUP_ID=$(terraform output -raw lb_security_group_id)
          API_INVOKE_URL=$(terraform output -raw api_invoke_url)
          LB_ECS_TARGET_GROUP_ARN=$(terraform output -raw lb_ecs_target_group_arn)
          LB_LAMBDA_TARGET_GROUP_ARN=$(terraform output -raw lb_lambda_target_group_arn)
          echo "LB_SECURITY_GROUP_ID=$LB_SECURITY_GROUP_ID" >> $GITHUB_OUTPUT
          echo "API_INVOKE_URL=$API_INVOKE_URL" >> $GITHUB_OUTPUT
          echo "LB_ECS_TARGET_GROUP_ARN=$LB_ECS_TARGET_GROUP_ARN" >> $GITHUB_OUTPUT
          echo "LB_LAMBDA_TARGET_GROUP_ARN=$LB_LAMBDA_TARGET_GROUP_ARN" >> $GITHUB_OUTPUT

  ecs:
    needs:
      - repo
      - image
      - network
    runs-on: ubuntu-latest
    env:
      TF_VAR_ecr_repo_name: ${{ needs.repo.outputs.ecr_repo_name }}
      TF_VAR_ecs_image_uri: ${{ needs.image.outputs.image_uri }}
      TF_VAR_lb_security_group_id: ${{ needs.network.outputs.lb_security_group_id }}
      TF_VAR_lb_target_group_arn: ${{ needs.network.outputs.lb_ecs_target_group_arn}}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.aws_region }}
          role-to-assume: arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.aws_role }}
          role-session-name: GitHubActions

      - name: Init
        shell: bash
        run: |
          cd tf/ecs
          terraform init
    
      - name: Deploy
        shell: bash
        id: deploy
        run: |
          cd tf/ecs
          terraform apply -auto-approve -var-file=${{ github.workspace }}/variables.tfvars

  lambda:
    needs: 
      - repo
      - code
      - network
    runs-on: ubuntu-latest
    env:
      TF_VAR_lambda_zip: ${{ needs.code.outputs.lambda_zip }}
      TF_VAR_lambda_bucket: ${{ needs.repo.outputs.lambda_code_bucket }}
      TF_VAR_lb_security_group_id: ${{ needs.network.outputs.lb_security_group_id }}
      TF_VAR_lb_target_group_arn: ${{ needs.network.outputs.lb_lambda_target_group_arn}}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.aws_region }}
          role-to-assume: arn:aws:iam::${{ vars.aws_account_id }}:role/${{ vars.aws_role }}
          role-session-name: GitHubActions

      - name: zip
        shell: bash
        run: |  
          npm install
          cp -r node_modules /src/node_modules

      - name: zip
        shell: bash
        run: |
          cd src
          zip -r ${{ env.TF_VAR_lambda_zip }} *

      - name: upload
        shell: bash
        run: |
          aws s3 cp src/${{ env.TF_VAR_lambda_zip }} s3://${{ env.TF_VAR_lambda_bucket }}/${{ env.TF_VAR_lambda_zip }}

      - name: Init
        shell: bash
        run: |
          cd tf/lambda
          terraform init
        
      - name: Deploy
        shell: bash
        id: deploy
        run: |
          cd tf/lambda
          terraform apply -auto-approve -var-file=${{ github.workspace }}/variables.tfvars
