name: Test weighting of a given endpoint
description: Runs 25 calls to an endpoint and asserts which backends have been hit

inputs:
  base_url:
    description: "The full URL of the resource"
    required: true
  expected_backends:
    description: "Comma-separated list of expected backends"
    required: true

runs:
  using: 'composite'
  steps:
    - name: Echo URL
      shell: bash
      run: echo ${{ inputs.base_url }}

    - name: Sleep for stability
      shell: bash
      run: sleep 60

    - name: Hit the endpoint 25 times and assert all expected backends are returned at least once
      shell: bash
      run: |
        declare -A BACKEND_COUNTS
        EXPECTED_BACKENDS="${{ inputs.expected_backends }}"

        # Initialize counters for each expected backend
        IFS=',' read -r -a backend_array <<< "$EXPECTED_BACKENDS"
        for backend in "${backend_array[@]}"; do
          BACKEND_COUNTS["$backend"]=0
        done

        # Hit the endpoint 25 times
        for i in {1..25}; do
          RESPONSE=$(curl -s "${{ inputs.base_url }}")
          echo "$RESPONSE" | jq
          BACKEND=$(echo "$RESPONSE" | jq -r '.backend')

          # Check if the backend field exists
          if [[ "$BACKEND" == "null" ]]; then
            echo "Error: Response does not contain backend field."
            exit 1
          fi

          # Increment the counter for the backend if it's in the expected backends
          if [[ -n "${BACKEND_COUNTS[$BACKEND]}" ]]; then
            BACKEND_COUNTS["$BACKEND"]=$((BACKEND_COUNTS["$BACKEND"] + 1))
          else
            echo "Error: Unknown backend '$BACKEND'."
            exit 1
          fi
        done

        # Display hit counts for each backend
        for backend in "${!BACKEND_COUNTS[@]}"; do
          echo "$backend hits: ${BACKEND_COUNTS[$backend]}"
        done

        # Assert that each expected backend was hit at least once
        for backend in "${!BACKEND_COUNTS[@]}"; do
          if [[ "${BACKEND_COUNTS[$backend]}" -lt 1 ]]; then
            echo "Test failed: $backend was not hit."
            exit 1
          fi
        done

        echo "Test passed: All expected backends were hit at least once."
